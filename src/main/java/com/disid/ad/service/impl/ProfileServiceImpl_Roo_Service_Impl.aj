// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.disid.ad.service.impl;

import com.disid.ad.model.Profile;
import com.disid.ad.model.User;
import com.disid.ad.repository.ProfileRepository;
import com.disid.ad.service.api.UserService;
import com.disid.ad.service.impl.ProfileServiceImpl;
import io.springlets.data.domain.GlobalSearch;
import java.util.HashSet;
import java.util.Iterator;
import java.util.List;
import java.util.Set;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Lazy;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

privileged aspect ProfileServiceImpl_Roo_Service_Impl {
    
    declare @type: ProfileServiceImpl: @Service;
    
    declare @type: ProfileServiceImpl: @Transactional(readOnly = true);
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    private ProfileRepository ProfileServiceImpl.profileRepository;
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    private UserService ProfileServiceImpl.userService;
    
    /**
     * TODO Auto-generated constructor documentation
     * 
     * @param profileRepository
     * @param userService
     */
    @Autowired
    public ProfileServiceImpl.new(ProfileRepository profileRepository, @Lazy UserService userService) {
        setProfileRepository(profileRepository);
        setUserService(userService);
    }

    /**
     * TODO Auto-generated method documentation
     * 
     * @return ProfileRepository
     */
    public ProfileRepository ProfileServiceImpl.getProfileRepository() {
        return profileRepository;
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param profileRepository
     */
    public void ProfileServiceImpl.setProfileRepository(ProfileRepository profileRepository) {
        this.profileRepository = profileRepository;
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @return UserService
     */
    public UserService ProfileServiceImpl.getUserService() {
        return userService;
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param userService
     */
    public void ProfileServiceImpl.setUserService(UserService userService) {
        this.userService = userService;
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param profile
     * @param usersToAdd
     * @return Profile
     */
    @Transactional
    public Profile ProfileServiceImpl.addToUsers(Profile profile, Iterable<Long> usersToAdd) {
        List<User> users = getUserService().findAll(usersToAdd);
        profile.addToUsers(users);
        return getProfileRepository().save(profile);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param profile
     * @param usersToRemove
     * @return Profile
     */
    @Transactional
    public Profile ProfileServiceImpl.removeFromUsers(Profile profile, Iterable<Long> usersToRemove) {
        List<User> users = getUserService().findAll(usersToRemove);
        profile.removeFromUsers(users);
        return getProfileRepository().save(profile);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param profile
     * @param users
     * @return Profile
     */
    @Transactional
    public Profile ProfileServiceImpl.setUsers(Profile profile, Iterable<Long> users) {
        List<User> items = getUserService().findAll(users);
        Set<User> currents = profile.getUsers();
        Set<User> toRemove = new HashSet<User>();
        for (Iterator<User> iterator = currents.iterator(); iterator.hasNext();) {
            User nextUser = iterator.next();
            if (items.contains(nextUser)) {
                items.remove(nextUser);
            } else {
                toRemove.add(nextUser);
            }
        }
        profile.removeFromUsers(toRemove);
        profile.addToUsers(items);
        // Force the version update of the parent side to know that the parent has changed
        // because it has new books assigned
        profile.setVersion(profile.getVersion() + 1);
        return getProfileRepository().save(profile);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param profile
     */
    @Transactional
    public void ProfileServiceImpl.delete(Profile profile) {
        // Clear bidirectional many-to-many parent relationship with User
        for (User item : profile.getUsers()) {
            item.getProfiles().remove(profile);
        }
        
        getProfileRepository().delete(profile);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param entities
     * @return List
     */
    @Transactional
    public List<Profile> ProfileServiceImpl.save(Iterable<Profile> entities) {
        return getProfileRepository().save(entities);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param ids
     */
    @Transactional
    public void ProfileServiceImpl.delete(Iterable<Long> ids) {
        List<Profile> toDelete = getProfileRepository().findAll(ids);
        getProfileRepository().deleteInBatch(toDelete);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param entity
     * @return Profile
     */
    @Transactional
    public Profile ProfileServiceImpl.save(Profile entity) {
        return getProfileRepository().save(entity);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param id
     * @return Profile
     */
    public Profile ProfileServiceImpl.findOne(Long id) {
        return getProfileRepository().findOne(id);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param id
     * @return Profile
     */
    public Profile ProfileServiceImpl.findOneForUpdate(Long id) {
        return getProfileRepository().findOneDetached(id);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param ids
     * @return List
     */
    public List<Profile> ProfileServiceImpl.findAll(Iterable<Long> ids) {
        return getProfileRepository().findAll(ids);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @return List
     */
    public List<Profile> ProfileServiceImpl.findAll() {
        return getProfileRepository().findAll();
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @return Long
     */
    public long ProfileServiceImpl.count() {
        return getProfileRepository().count();
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param globalSearch
     * @param pageable
     * @return Page
     */
    public Page<Profile> ProfileServiceImpl.findAll(GlobalSearch globalSearch, Pageable pageable) {
        return getProfileRepository().findAll(globalSearch, pageable);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param ids
     * @param globalSearch
     * @param pageable
     * @return Page
     */
    public Page<Profile> ProfileServiceImpl.findAllByIdsIn(List<Long> ids, GlobalSearch globalSearch, Pageable pageable) {
        return getProfileRepository().findAllByIdsIn(ids, globalSearch, pageable);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @return Class
     */
    public Class<Profile> ProfileServiceImpl.getEntityType() {
        return Profile.class;
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @return Class
     */
    public Class<Long> ProfileServiceImpl.getIdType() {
        return Long.class;
    }
    
}
