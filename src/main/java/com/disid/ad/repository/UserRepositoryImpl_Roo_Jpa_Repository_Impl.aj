// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.disid.ad.repository;

import com.disid.ad.model.Profile;
import com.disid.ad.model.QUser;
import com.disid.ad.model.User;
import com.disid.ad.repository.UserRepositoryCustom;
import com.disid.ad.repository.UserRepositoryImpl;
import com.querydsl.core.types.Path;
import com.querydsl.jpa.JPQLQuery;
import io.springlets.data.domain.GlobalSearch;
import io.springlets.data.jpa.repository.support.QueryDslRepositorySupportExt.AttributeMappingBuilder;
import java.util.List;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.util.Assert;

privileged aspect UserRepositoryImpl_Roo_Jpa_Repository_Impl {
    
    declare parents: UserRepositoryImpl implements UserRepositoryCustom;
    
    declare @type: UserRepositoryImpl: @Transactional(readOnly = true);
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String UserRepositoryImpl.NAME = "name";
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String UserRepositoryImpl.LOGIN = "login";
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String UserRepositoryImpl.BLOCKED = "blocked";
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String UserRepositoryImpl.NEW_REGISTRATION = "newRegistration";
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param globalSearch
     * @param pageable
     * @return Page
     */
    public Page<User> UserRepositoryImpl.findAll(GlobalSearch globalSearch, Pageable pageable) {
        
        QUser user = QUser.user;
        
        JPQLQuery<User> query = from(user);
        
        Path<?>[] paths = new Path<?>[] {user.name,user.login,user.blocked,user.newRegistration};        
        applyGlobalSearch(globalSearch, query, paths);
        
        AttributeMappingBuilder mapping = buildMapper()
			.map(NAME, user.name)
			.map(LOGIN, user.login)
			.map(BLOCKED, user.blocked)
			.map(NEW_REGISTRATION, user.newRegistration);
        
        applyPagination(pageable, query, mapping);
        applyOrderById(query);
        
        return loadPage(query, pageable, user);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param ids
     * @param globalSearch
     * @param pageable
     * @return Page
     */
    public Page<User> UserRepositoryImpl.findAllByIdsIn(List<Long> ids, GlobalSearch globalSearch, Pageable pageable) {
        
        QUser user = QUser.user;
        
        JPQLQuery<User> query = from(user);
        
        Path<?>[] paths = new Path<?>[] {user.name,user.login,user.blocked,user.newRegistration};        
        applyGlobalSearch(globalSearch, query, paths);
        
        // Also, filter by the provided ids
        query.where(user.id.in(ids));
        
        AttributeMappingBuilder mapping = buildMapper()
			.map(NAME, user.name)
			.map(LOGIN, user.login)
			.map(BLOCKED, user.blocked)
			.map(NEW_REGISTRATION, user.newRegistration);
        
        applyPagination(pageable, query, mapping);
        applyOrderById(query);
        
        return loadPage(query, pageable, user);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param profiles
     * @param globalSearch
     * @param pageable
     * @return Page
     */
    public Page<User> UserRepositoryImpl.findByProfilesContains(Profile profiles, GlobalSearch globalSearch, Pageable pageable) {
        
        QUser user = QUser.user;
        
        JPQLQuery<User> query = from(user);
        
        Assert.notNull(profiles, "profiles is required");
        
        query.where(user.profiles.contains(profiles));
        Path<?>[] paths = new Path<?>[] {user.name,user.login,user.blocked,user.newRegistration};        
        applyGlobalSearch(globalSearch, query, paths);
        
        AttributeMappingBuilder mapping = buildMapper()
			.map(NAME, user.name)
			.map(LOGIN, user.login)
			.map(BLOCKED, user.blocked)
			.map(NEW_REGISTRATION, user.newRegistration);
        
        applyPagination(pageable, query, mapping);
        applyOrderById(query);
        
        return loadPage(query, pageable, user);
    }
    
}
